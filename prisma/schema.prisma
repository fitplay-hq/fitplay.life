generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "../lib/generated/zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid())
  name      String   @default("admin")
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id           String              @id @default(uuid())
  name         String              @db.VarChar(30)
  email        String              @unique
  password     String
  phone        String              @unique
  role         Role
  gender       Gender?
  birthDate    DateTime?
  companyId    String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt
  verified     Boolean             @default(false)
  claimed      Boolean             @default(false)
  orders       Order[]
  transactions TransactionLedger[]
  company      Company             @relation(fields: [companyId], references: [id])
  wallet       Wallet?
}

model Vendor {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(50)
  email     String    @unique
  phone     String    @unique
  password  String
  role      Role      @default(VENDOR)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
}

model Company {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(50)
  address   String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  users     User[]
  products  Product[] @relation("CompanyToProduct")
}

model Product {
  id             String       @id @default(uuid())
  name           String       @db.VarChar(50)
  images         String[]
  description    String
  discount       Int?
  sku            String       @unique @db.VarChar(100)
  availableStock Int
  category       Category
  avgRating      Float?
  noOfReviews    Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  specifications Json?
  subCategory    SubCategory?
  orderItems     OrderItem[]
  variants       Variant[]
  companies      Company[]    @relation("CompanyToProduct")
  vendor         Vendor?      @relation(fields: [vendorId], references: [id])
  vendorId       String?
}

model Variant {
  id              String      @id @default(uuid())
  variantCategory String      @db.VarChar(50)
  variantValue    String      @db.VarChar(100)
  mrp             Int
  credits         String?
  availableStock  Int?
  productId       String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  orderItems      OrderItem[]
  product         Product     @relation(fields: [productId], references: [id])
}

model Wallet {
  id                String              @id @default(uuid())
  userId            String              @unique
  balance           Int
  expiryDate        DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  transactionLedger TransactionLedger[]
  user              User                @relation(fields: [userId], references: [id])
}

model TransactionLedger {
  id            String   @id @default(uuid())
  userId        String
  amount        Int
  modeOfPayment Modes
  cashAmount    Int?
  isCredit      Boolean
  walletId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  order         Order?
  user          User     @relation(fields: [userId], references: [id])
  wallet        Wallet   @relation(fields: [walletId], references: [id])
}

model Order {
  id                String             @id @default(uuid())
  userId            String
  amount            Int
  status            Status
  transactionId     String?            @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  transactionLedger TransactionLedger? @relation(fields: [transactionId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  items             OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int      @default(1)
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  variant   Variant? @relation(fields: [variantId], references: [id])
}

enum Status {
  PENDING
  APPROVED
  DISPATCHED
  DELIVERED
  CANCELLED
}

enum Modes {
  Credits
  Cash
  Both
}

enum Category {
  Fitness_And_Gym_Equipment
  Nutrition_And_Health
  Diagnostics_And_Prevention
  Ergonomics_And_Workspace_Comfort
  Health_And_Wellness_Services
}

enum SubCategory {
  Cardio_Equipment
  Probiotics_And_Supplements
  Wearable_Health_Technology
  Standing_Desks_And_Accessories
  Onsite_Fitness_Classes_And_Workshops
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  HR
  EMPLOYEE
  VENDOR
}
